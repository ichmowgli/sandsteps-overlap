import { type NextPage } from "next";
import Head from "next/head";
import {
  FormEventHandler,
  MutableRefObject,
  useEffect,
  useLayoutEffect,
} from "react";
import { useRef, useState } from "react";
import gsap from "gsap";
// import SplitText from 'gsap/SplitText';

import { api } from "../utils/api";

const TextInput = ({
  label,
  placeholder,
  inputRef,
}: {
  label: string;
  placeholder: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  inputRef: MutableRefObject<any>;
}) => {
  return (
    <div>
      <label htmlFor="price" className="block text-sm font-medium text-white">
        {label}
      </label>
      <div className="relative mt-1 rounded-md shadow-sm">
        <input
          type="text"
          name="price"
          id="price"
          className="block w-full rounded-md border-gray-300 px-3 placeholder-shown:border-gray-500 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
          placeholder={placeholder}
          ref={inputRef}
        />
      </div>
    </div>
  );
};

const Overlap = ({ content }: { content: string[] }) => {
  const contentRef = useRef<HTMLDivElement>(null);

  const setChildrenOpacityTo = (value: string) => {
    const children = contentRef.current?.children;
    if (!children) return;
    for (const child of children) {
      (child as HTMLDivElement).style.opacity = "1";
    }
  };

  useEffect(() => {
    // setChildrenOpacityTo('0');
    const timer = setTimeout(() => {
      setChildrenOpacityTo("1");
    }, 100);
    return () => clearTimeout(timer);
  }, [contentRef.current?.children]);

  return (
    <div
      ref={contentRef}
      className="flex flex-wrap  items-center justify-center bg-gradient-to-r  from-indigo-500 via-purple-500 to-pink-500 bg-clip-text text-9xl font-normal tracking-widest text-transparent transition-opacity duration-100"
      style={{
        fontFamily: "Modak",
      }}
    >
      {content.map((e, idx) => (
        <span
          style={{
            transitionDelay: `${idx * 100}ms`,
            opacity: "0",
          }}
          key={idx}
        >
          {e.toUpperCase()}
        </span>
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const calculateOverlap = api.overlap.calculate.useMutation();

  const firstRef = useRef<HTMLInputElement>();
  const secondRef = useRef<HTMLInputElement>();

  const [isLoading, setIsLoading] = useState(false);

  const [overlappingChars, setOverlappingChars] = useState<string[]>([]);

  const handleFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {
    e.preventDefault();

    if (!firstRef.current || !secondRef.current) {
      return;
    }

    setIsLoading(true);
    const requestData = {
      first: firstRef.current.value,
      second: secondRef.current.value,
    };

    calculateOverlap.mutate(requestData, {
      onSettled() {
        setIsLoading(false);
      },
      onSuccess(data) {
        console.log({ data });
        const chars = data.positions.map(
          ([position]: number[]) => requestData.first[position!]!
        );
        setOverlappingChars(chars);
      },
    });
  };

  return (
    <>
      <Head>
        <title>Overlap counter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin=""
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Modak&display=swap"
          rel="stylesheet"
        />
      </Head>
      <main className="flex min-h-screen h-fit flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col h-fit items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Find <span className="text-[hsl(280,100%,70%)]">overlap</span> of
            words
          </h1>
          <form
            onSubmit={handleFormSubmit}
            className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8"
          >
            <TextInput label="First" placeholder="First" inputRef={firstRef} />
            <TextInput
              label="Second"
              placeholder="Second"
              inputRef={secondRef}
            />

            <button type="submit">Submit form</button>
          </form>

          <div className="h-10 w-full max-w-full h-fit">
            {!isLoading && overlappingChars.length ? (
              <Overlap content={overlappingChars} />
            ) : (
              <></>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
